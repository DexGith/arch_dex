<meta http-equiv="content-type" content="text/html; charset=utf-8"><h2 class="slp-text-heading2-bold copy_block__header" id="ci-cd-explained" data-v-64ad2128="" data-v-9e820384="">CI/CD explained</h2><a href="https://about.gitlab.com/topics/ci-cd/#ci-cd-explained" data-ga-name="CI/CD explained" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a><div class="slp-container copy_block" id="ci-cd-explained" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>CI/CD
 falls under DevOps (the joining of development and operations teams) 
and combines the practices of continuous integration and continuous 
delivery. CI/CD automates much or all of the manual human intervention 
traditionally needed to get new code from a commit into production, 
encompassing the build, test (including integration tests, unit tests, 
and regression tests), and deploy phases, as well as infrastructure 
provisioning. With a CI/CD pipeline, development teams can make changes 
to code that are then automatically tested and pushed out for delivery 
and deployment. <a href="https://about.gitlab.com/blog/beginner-guide-ci-cd/">Get CI/CD right</a> and downtime is minimized and code releases happen faster.</p>
<p><img src="https://res.cloudinary.com/about-gitlab-com/image/upload/v1751041112/vwwcru6bgncufjqeetg5.svg" alt="GitLab CI/CD"></p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="why-is-ci-cd-important" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="why-is-ci-cd-important" data-v-64ad2128="" data-v-9e820384="">Why is CI/CD important?</h2><a href="https://about.gitlab.com/topics/ci-cd/#why-is-ci-cd-important" data-ga-name="Why is CI/CD important?" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="why-is-ci-cd-important" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>In
 today's fast-paced technological landscape, Continuous Integration and 
Continuous Delivery (CI/CD) are more than just industry buzzwordsâ€”they 
represent a crucial foundation for a modern software development 
process.</p>
<p>CI/CD is crucial because it automates the software development 
process, from coding through deployment. This automation means teams can
 release new features and fixes faster and more frequently, enhancing 
the product's responsiveness to user needs. By continuously integrating 
and deploying, errors are detected sooner, reducing downtime and 
improving software quality.</p>
<p>CI/CD also allows for quicker feedback loops with stakeholders, 
ensuring that the final product aligns closely with user expectations. 
Overall, it's a foundational practice for any team aiming for 
high-speed, high-quality software development.</p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="what-is-continuous-integration-ci" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="what-is-continuous-integration-ci" data-v-64ad2128="" data-v-9e820384="">What is continuous integration (CI)?</h2><a href="https://about.gitlab.com/topics/ci-cd/#what-is-continuous-integration-ci" data-ga-name="What is continuous integration (CI)?" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="what-is-continuous-integration-ci" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p><a href="https://about.gitlab.com/topics/ci-cd/benefits-continuous-integration/">Continuous integration</a>
 is the practice of integrating all your code changes into the main 
branch of a shared source code repository early and often, automatically
 testing each change when you commit or merge them, and automatically 
kicking off a build. With continuous integration, errors and security 
issues can be identified and fixed more easily, and much earlier in the 
development process.</p>
<p>By merging changes frequently and triggering automatic testing and 
validation processes, you minimize the possibility of code conflict, 
even with multiple developers working on the same application. A 
secondary advantage is that you don't have to wait long for answers and 
can, if necessary, fix bugs and security issues while the topic is still
 fresh in your mind.</p>
<p>Common code validation processes start with a static code analysis 
that verifies the quality of the code. Once the code passes the static 
tests, automated CI routines package and compile the code for further 
automated testing. CI processes should have a version control system 
that tracks changes so you know the version of the code used.</p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="what-is-continuous-delivery-cd" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="what-is-continuous-delivery-cd" data-v-64ad2128="" data-v-9e820384="">What is continuous delivery (CD)? </h2><a href="https://about.gitlab.com/topics/ci-cd/#what-is-continuous-delivery-cd" data-ga-name="What is continuous delivery (CD)? " data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="what-is-continuous-delivery-cd" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>Continuous
 delivery is a software development practice that works in conjunction 
with CI to automate the infrastructure provisioning and application 
release process.</p>
<p>Once code has been tested and built as part of the CI process, CD 
takes over during the final stages to ensure it's packaged with 
everything it needs to deploy to any environment at any time. CD can 
cover everything from provisioning the infrastructure to deploying the 
application to the testing or production environment.</p>
<p>With CD, the software is built so that it can be deployed to 
production at any time. Then you can trigger the deployments manually or
 move to continuous deployment, where deployments are automated as well.</p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="what-is-continuous-deployment" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="what-is-continuous-deployment" data-v-64ad2128="" data-v-9e820384="">What is continuous deployment? </h2><a href="https://about.gitlab.com/topics/ci-cd/#what-is-continuous-deployment" data-ga-name="What is continuous deployment? " data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="what-is-continuous-deployment" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>Continuous
 deployment enables organizations to deploy their applications 
automatically, eliminating the need for human intervention. With 
continuous deployment, DevOps teams set the criteria for code releases 
ahead of time and when those criteria are met and validated, the code is
 deployed into the production environment. This allows organizations to 
be more nimble and get new features into the hands of users faster.</p>
<p>While you can do continuous integration without continuous delivery 
or deployment, you can't really do CD without already having CI in 
place. That's because it would be extremely difficult to be able to 
deploy to production at any time if you aren't practicing CI 
fundamentals like integrating code to a shared repo, automating testing 
and builds, and doing it all in small batches on a daily basis.</p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="what-are-ci-cd-pipelines" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="what-are-ci-cd-pipelines" data-v-64ad2128="" data-v-9e820384="">What are CI/CD pipelines?</h2><a href="https://about.gitlab.com/topics/ci-cd/#what-are-ci-cd-pipelines" data-ga-name="What are CI/CD pipelines?" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>A <a href="https://about.gitlab.com/topics/ci-cd/cicd-pipeline/">CI/CD pipeline</a>
 is an automated process utilized by software development teams to 
streamline the creation, testing and deployment of applications. "CI" 
represents continuous integration, where developers frequently merge 
code changes into a central repository, allowing early detection of 
issues. "CD" refers to continuous deployment or continuous delivery, 
which automates the application's release to its intended environment, 
ensuring that it is readily available to users. This pipeline is vital 
for teams aiming to improve software quality and speed up delivery 
through regular, reliable updates.</p>
<p>Integrating a CI/CD pipeline into your workflow significantly reduces
 the risk of errors in the deployment process. Automating builds and 
tests ensures that bugs are caught early and fixed promptly, maintaining
 high-quality software.</p>
<h3 id="what-is-meant-by-continuous-testing" tabindex="-1">What is meant by continuous testing? <a class="header-anchor" href="https://about.gitlab.com/topics/ci-cd/#what-is-meant-by-continuous-testing">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"></svg></a></h3></div></div></div><div class="slp-container copy_block" id="what-are-ci-cd-pipelines" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><h3 id="what-is-meant-by-continuous-testing" tabindex="-1"><a class="header-anchor" href="https://about.gitlab.com/topics/ci-cd/#what-is-meant-by-continuous-testing">
        </a></h3>
<p>Continuous testing is a software testing practice where tests are 
continuously run in order to identify bugs as soon as they are 
introduced into the codebase. In a CI/CD pipeline, continuous testing is
 typically performed automatically, with each code change triggering a 
series of tests to ensure that the application is still working as 
expected. This can help to identify problems early in the development 
process and prevent them from becoming more difficult and costly to fix 
later on. Continuous testing can also provide valuable feedback to 
developers about the quality of their code, helping them to identify and
 address potential issues before they are released to production.</p>
<p>In continuous testing, various types of tests are performed within the CI/CD pipeline. These can include:</p>
<ul>
<li><strong>Unit testing</strong>, which checks that individual units of code work as expected</li>
<li><strong>Integration testing</strong>, which verifies how different modules or services within an application work together</li>
<li><strong>Regression testing</strong>, which is performed after a bug is fixed to ensure that specific bug won't occur again</li>
</ul>
</div></div></div></div></div></div><div class="slp-container copy_block" id="ci-cd-fundamentals" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="ci-cd-fundamentals" data-v-64ad2128="" data-v-9e820384="">CI/CD fundamentals</h2><a href="https://about.gitlab.com/topics/ci-cd/#ci-cd-fundamentals" data-ga-name="CI/CD fundamentals" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="ci-cd-fundamentals" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>There
 are eight fundamental elements of CI/CD that help ensure maximum 
efficiency for your development lifecycle. They span development and 
deployment. Include these fundamentals in your pipeline to improve your 
DevOps workflow and software delivery:</p>
<ol>
<li>
<p><strong>A single source repository</strong>
Source code management (SCM) that houses all necessary files and scripts
 to create builds is critical. The repository should contain everything 
needed for the build. This includes source code, database structure, 
libraries, properties files, and version control. It should also contain
 test scripts and scripts to build applications.</p>
</li>
<li>
<p><strong>Frequent check-ins to main branch</strong>
Integrate code in your trunk, mainline or master branch â€” i.e., 
trunk-based development â€” early and often. Avoid sub-branches and work 
with the main branch only. Use small segments of code and merge them 
into the branch as frequently as possible. Don't merge more than one 
change at a time.</p>
</li>
<li>
<p><strong>Automated builds</strong>
Scripts should include everything you need to build from a single 
command. This includes web server files, database scripts, and 
application software. The CI processes should automatically package and 
compile the code into a usable application.</p>
</li>
<li>
<p><strong>Self-testing builds</strong>
CI/CD requires continuous testing. Testing scripts should ensure that 
the failure of a test results in a failed build. Use static pre-build 
testing scripts to check code for integrity, quality, and security 
compliance. Only allow code that passes static tests into the build.</p>
</li>
<li>
<p><strong>Frequent iterations</strong>
Multiple commits to the repository results in fewer places for conflicts
 to hide. Make small, frequent iterations rather than major changes. By 
doing this, it's possible to roll changes back easily if there's a 
problem or conflict.</p>
</li>
<li>
<p><strong>Stable testing environments</strong>
Code should be tested in a cloned version of the production environment.
 You can't test new code in the live production version. Create a cloned
 environment that's as close as possible to the real environment. Use 
rigorous testing scripts to detect and identify bugs that slipped 
through the initial pre-build testing process.</p>
</li>
<li>
<p><strong>Maximum visibility</strong>
Every developer should be able to access the latest executables and see 
any changes made to the repository. Information in the repository should
 be visible to all. Use version control to manage handoffs so developers
 know which is the latest version. Maximum visibility means everyone can
 monitor progress and identify potential concerns.</p>
</li>
<li>
<p><strong>Predictable deployments anytime</strong>
Deployments should be so routine and low-risk that the team is 
comfortable doing them anytime. CI/CD testing and verification processes
 should be rigorous and reliable, giving the team confidence to deploy 
updates at any time. Frequent deployments incorporating limited changes 
also pose lower risks and can be easily rolled back.</p>
</li>
</ol>
</div></div></div></div></div></div><div class="slp-container copy_block" id="the-benefits-of-ci-cd-implementation" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="the-benefits-of-ci-cd-implementation" data-v-64ad2128="" data-v-9e820384="">The benefits of CI/CD implementation</h2><a href="https://about.gitlab.com/topics/ci-cd/#the-benefits-of-ci-cd-implementation" data-ga-name="The benefits of CI/CD implementation" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="the-benefits-of-ci-cd-implementation" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>Companies
 and organizations that adopt CI/CD tend to notice a lot of positive 
changes. Here are some of the benefits you can look forward to as you 
implement CI/CD:</p>
<ul>
<li>
<p><strong>Happier users and customers:</strong> Fewer bugs and errors 
make it into production, so your users and customers have a better 
experience. This leads to improved levels of customer satisfaction, 
improved customer confidence, and a better reputation for your 
organization.</p>
</li>
<li>
<p><strong>Accelerated time-to-value:</strong> When you can deploy any 
time, you can bring products and new features to market faster. Your 
development costs are lower, and a faster turnaround frees your team for
 other work. Customers get results faster, giving your company a 
competitive edge.</p>
</li>
<li>
<p><strong>Less fire fighting:</strong> Testing code more often, in 
smaller batches, and earlier in the development cycle can seriously cut 
down on fire drills. This results in a smoother development cycle and 
less team stress. Results are more predictable, and it's easier to find 
and fix bugs.</p>
</li>
<li>
<p><strong>Hit dates more reliably:</strong> Removing deployment 
bottlenecks and making deployments predictable can remove a lot of the 
uncertainty around hitting key dates. Breaking work into smaller, 
manageable bites means it's easier to complete each stage on time and 
track progress. This approach gives plenty of time to monitor overall 
progress and determine completion dates more accurately.</p>
</li>
<li>
<p><strong>Free up developers' time:</strong> With more of the 
deployment process automated, the team has time for more rewarding 
projects. It's estimated that developers spend between 35% and 50% of 
their time testing, validating, and debugging code. Automating these 
processes <a href="https://about.gitlab.com/topics/devops/what-is-developer-experience/">improves developer experience</a> and significantly improves their productivity.</p>
</li>
<li>
<p><strong>Less context switching:</strong> Getting real-time feedback 
on their code makes it easier for developers to work on one thing at a 
time and minimizes their cognitive load. By working with small sections 
of code that are automatically tested, developers can debug code quickly
 while their minds are still fresh from programming. Finding bugs is 
easier because there's less code to review.</p>
</li>
<li>
<p><strong>Reduce burnout:</strong> <a href="https://continuousdelivery.com/evidence-case-studies/#research">Research shows</a>
 that CD measurably reduces deployment pain and team burnout. Developers
 experience less frustration and strain when working with CI/CD 
processes. This leads to happier and healthier employees and less 
burnout.</p>
</li>
<li>
<p><strong>Recover faster:</strong> CI/CD makes it easier to fix issues 
and recover from incidents, reducing mean time to resolution (MTTR). 
Continuous deployment practices mean frequent small software updates so 
when bugs appear, it's easier to pin them down. Developers have the 
option of fixing bugs quickly or rolling back the change so that the 
customer can get back to work quickly.</p>
</li>
</ul>
</div></div></div></div></div></div><div class="slp-container copy_block" id="how-does-ci-cd-fit-into-the-dev-ops-framework" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="how-does-ci-cd-fit-into-the-dev-ops-framework" data-v-64ad2128="" data-v-9e820384="">How does CI/CD fit into the DevOps framework?</h2><a href="https://about.gitlab.com/topics/ci-cd/#how-does-ci-cd-fit-into-the-dev-ops-framework" data-ga-name="How does CI/CD fit into the DevOps framework?" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="slp-container copy_block" id="how-does-ci-cd-fit-into-the-dev-ops-framework" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="copy_block__content copy" data-v-9e820384=""><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>CI/CD
 is a cornerstone practice within the DevOps framework. It bridges the 
gap between development (Dev) and operations (Ops) through automation 
and continuous processes. By automating the build, test, and deployment 
phases, CI/CD enables rapid, reliable software releases. Due to this, it
 aligns closely with DevOp's goals of improving collaboration, 
efficiency, and product quality.</p>
<p>As an indispensable component of <a href="https://about.gitlab.com/topics/devops/">DevOps</a>
 and modern software development, CI/CD leverages a purpose-built 
platform to optimize productivity, increase efficiency, and streamline 
workflows via automation, testing, and collaboration. This is 
particularly beneficial as applications scale, helping to <a href="https://about.gitlab.com/blog/parent-child-vs-multi-project-pipelines/">simplify development complexity</a>.
 Moreover, integrating CI/CD with other DevOps practicesâ€”such as 
enhancing security measures early in the development process and 
tightening feedback loopsâ€”enables organizations to overcome development 
silos, scale operations securely, and maximize the benefits of CI/CD.</p>
<p>This integration ensures that development, security, and operations 
teams can work more cohesively, streamlining the software development 
lifecycle. It also encourages a culture of continuous improvement.</p>
</div></div></div></div></div></div><div class="slp-container copy_block" id="why-git-lab-ci-cd" data-v-3eff0d97="" data-v-e594efe8="" data-v-9e820384=""><div class="slp-col-md-12" data-v-00b68f22="" data-v-9e820384=""><div class="decoration" data-v-9e820384=""></div><div class="anchor-header" data-v-9e820384=""><h2 class="slp-text-heading2-bold copy_block__header" id="why-git-lab-ci-cd" data-v-64ad2128="" data-v-9e820384="">Why GitLab CI/CD?</h2><a href="https://about.gitlab.com/topics/ci-cd/#why-git-lab-ci-cd" data-ga-name="Why GitLab CI/CD?" data-ga-location="body" data-v-9e820384=""><svg viewBox="0 0 16 16" class="slp-icon slp-icon slp-icon--size-md slp-icon--color-color-text-300" style="" role="img" aria-hidden="true" data-icon-name="" variant="marketing" data-v-c3411281="" data-v-9e820384=""></svg></a></div></div></div><div class="block" data-v-9e820384=""><div class="slp-text-body1" data-v-64ad2128="" data-v-9e820384=""><div class="copy_block__text" data-v-9e820384=""><p>In
 order to complete all the required fundamentals of full CI/CD, many CI 
platforms rely on integrations with other tools to fulfill those needs. 
Many organizations have to maintain costly and complicated toolchains in
 order to have full CI/CD capabilities. This often means maintaining a 
separate SCM like Bitbucket or GitHub, and connecting to a separate 
testing tool that connects to their CI tool, that connects to a 
deployment tool like Chef or Puppet, that also connects to various 
security and monitoring tools.</p>
<p>Instead of just focusing on building great software, organizations 
have to also maintain and manage a complicated toolchain. GitLab is a 
single application for the entire DevSecOps lifecycle, meaning we 
fulfill all the fundamentals for CI/CD in on</p></div></div></div>