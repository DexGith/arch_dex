
Skip to content
Navigation Menu
folke
lazydev.nvim

Code
Issues
Pull requests 4
Discussions
Actions
Security

    Insights

Owner avatar
lazydev.nvim
Public

folke/lazydev.nvim
t
Name	Last commit message
	Last commit date
ItsJPrentice
ItsJPrentice
fix(lspconfig): add check for lsp.is_enabled (#123)
258d2a5
 ¬∑ 
Sep 17, 2025
.github
	
ci: update
	
Jul 22, 2024
doc
	
chore(build): auto-generate docs
	
Sep 17, 2025
lua/lazydev
	
fix(lspconfig): add check for lsp.is_enabled (#123)
	
Sep 17, 2025
.editorconfig
	
chore(update): update repository (#55)
	
Jul 15, 2024
.gitignore
	
ci: update
	
Jul 6, 2024
CHANGELOG.md
	
chore(main): release 1.9.0 (#75)
	
Nov 25, 2024
LICENSE
	
ci: update
	
Jul 5, 2024
README.md
	
docs: updated to DrKJeff16/wezterm-types (#119)
	
Sep 15, 2025
selene.toml
	
ci: update
	
Jul 5, 2024
stylua.toml
	
feat: initial commit
	
Jun 1, 2024
vim.toml
	
ci: update
	
Jul 5, 2024
Repository files navigation

README

    Apache-2.0 license

üíª lazydev.nvim

lazydev.nvim is a plugin that properly configures LuaLS for editing your Neovim config by lazily updating your workspace libraries.
‚ú® Features

    much faster auto-completion, since only the modules you require in open Neovim files will be loaded.
    no longer needed to configure what plugin sources you want to have enabled for a certain project
    load third-party addons from LLS-Addons
    will update your workspace libraries for:
        require statements: require("nvim-treesitter")
        module annotations: ---@module "nvim-treesitter"
    nvim-cmp, blink.cmp and nvim_coq completion source for the above

2024-06-01_21-02-40
‚ö†Ô∏è Limitations

    If you have files that only use types from a plugin, then those types won't be available in your workspace.
    completion for module names when typing require(...) will only return loaded modules in your workspace.
    To get around the above, you can:
        pre-load those plugins with the library option.
        use the nvim-cmp, blink.cmp or coq_nvim completion source to get all available modules.
    Neovim types are NOT included and also no longer needed on Neovim >= 0.10

‚ö°Ô∏è Requirements

    Neovim >= 0.10.0
    lazy.nvim plugin manager
        OR a plugin manager that uses Neovim's native package system

üì¶ Installation

With lazy.nvim:

return {
  {
    "folke/lazydev.nvim",
    ft = "lua", -- only load on lua files
    opts = {
      library = {
        -- See the configuration section for more details
        -- Load luvit types when the `vim.uv` word is found
        { path = "${3rd}/luv/library", words = { "vim%.uv" } },
      },
    },
  },
  { -- optional cmp completion source for require statements and module annotations
    "hrsh7th/nvim-cmp",
    opts = function(_, opts)
      opts.sources = opts.sources or {}
      table.insert(opts.sources, {
        name = "lazydev",
        group_index = 0, -- set group index to 0 to skip loading LuaLS completions
      })
    end,
  },
  { -- optional blink completion source for require statements and module annotations
    "saghen/blink.cmp",
    opts = {
      sources = {
        -- add lazydev to your completion providers
        default = { "lazydev", "lsp", "path", "snippets", "buffer" },
        providers = {
          lazydev = {
            name = "LazyDev",
            module = "lazydev.integrations.blink",
            -- make lazydev completions top priority (see `:h blink.cmp`)
            score_offset = 100,
          },
        },
      },
    },
  }
  -- { "folke/neodev.nvim", enabled = false }, -- make sure to uninstall or disable neodev.nvim
}

‚öôÔ∏è Configuration

Tip

You can force enable/disable lazydev in certain project folders using :h 'exrc' with vim.g.lazydev_enabled = true or vim.g.lazydev_enabled = false

Examples:

{
  "folke/lazydev.nvim",
  ft = "lua", -- only load on lua files
  opts = {
    library = {
      -- Library paths can be absolute
      "~/projects/my-awesome-lib",
      -- Or relative, which means they will be resolved from the plugin dir.
      "lazy.nvim",
      -- It can also be a table with trigger words / mods
      -- Only load luvit types when the `vim.uv` word is found
      { path = "${3rd}/luv/library", words = { "vim%.uv" } },
      -- always load the LazyVim library
      "LazyVim",
      -- Only load the lazyvim library when the `LazyVim` global is found
      { path = "LazyVim", words = { "LazyVim" } },
      -- Load the wezterm types when the `wezterm` module is required
      -- Needs `DrKJeff16/wezterm-types` to be installed
      { path = "wezterm-types", mods = { "wezterm" } },
      -- Load the xmake types when opening file named `xmake.lua`
      -- Needs `LelouchHe/xmake-luals-addon` to be installed
      { path = "xmake-luals-addon/library", files = { "xmake.lua" } },
    },
    -- always enable unless `vim.g.lazydev_enabled = false`
    -- This is the default
    enabled = function(root_dir)
      return vim.g.lazydev_enabled == nil and true or vim.g.lazydev_enabled
    end,
    -- disable when a .luarc.json file is found
    enabled = function(root_dir)
      return not vim.uv.fs_stat(root_dir .. "/.luarc.json")
    end,
  },
},

Default settings:

---@alias lazydev.Library {path:string, words:string[], mods:string[]}
---@alias lazydev.Library.spec string|{path:string, words?:string[], mods?:string[]}
---@class lazydev.Config
local defaults = {
  runtime = vim.env.VIMRUNTIME --[[@as string]],
  library = {}, ---@type lazydev.Library.spec[]
  integrations = {
    -- Fixes lspconfig's workspace management for LuaLS
    -- Only create a new workspace if the buffer is not part
    -- of an existing workspace or one of its libraries
    lspconfig = true,
    -- add the cmp source for completion of:
    -- `require "modname"`
    -- `---@module "modname"`
    cmp = true,
    -- same, but for Coq
    coq = false,
  },
  ---@type boolean|(fun(root:string):boolean?)
  enabled = function(root_dir)
      return vim.g.lazydev_enabled == nil and true or vim.g.lazydev_enabled
  end,
}

üöÄ Usage

Just install the plugin and start editing your Lua files.

If you don't use nvim-lspconfig, then you can use require('lazydev').find_workspace(buf?) to check if the buffer is part of an existing workspace or its libraries.

The :LazyDev command:

    :LazyDev or :LazyDev debug will show a notification with the lazydev settings for the current buffer.
    :LazyDev lsp: will show a notification with the settings for any attached LSP servers. Not limited to LuaLS.

About

Faster LuaLS setup for Neovim
Resources
Readme
License
Apache-2.0 license
Activity
Stars
1.3k stars
Watchers
5 watching
Forks
37 forks
Report repository
Releases 13
v1.9.0 Latest
Nov 25, 2024
+ 12 releases
Contributors 12

    @folke
    @github-actions[bot]
    @ItsJPrentice
    @FelipeLema
    @tris203
    @andrewbraxton
    @TheLeoP
    @abeldekat
    @s014c3
    @barrett-ruth
    @Curs3W4ll
    @DrKJeff16

Languages

    Lua 100.0% 

Footer
¬© 2025 GitHub, Inc.
Footer navigation

    Terms
    Privacy
    Security
    Status
    Community
    Docs
    Contact

folke/lazydev.nvim: Faster LuaLS setup for Neovim
