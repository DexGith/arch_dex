# /etc/keyd/default.conf


[ids]


# my hardware IDs
248a:00da
0001:0001
# 1532:0065


## side note if you plug your red keyboard it won't work here. to make it work here you need to put it's keycode in here.
## but why put it's keycode here? unless keyd can make the 2nd keyboard act
## differently ike AHK interception, I'm not planing to write using the 2nd keyboard. soyeah.
## just trying to increase optins and know how to achieve AHK interception on linux I guess 



[global]
overload_tap_timeout = 168




# me main most used or planed to be used keys on the blue keyboard
[main]

# ------ Keys -------


# f24 = 

# f13 = scrolllock
# f13 = overloadt(extend, escape, 168)

capslock = overloadt(extend, escape, 168)

escape = overload(escape_extend, escape)

# leftshift = oneshot(shift)
leftshift = overload(shift,oneshot(shift))



# I thik this is better 
rightshift = overload(shift,oneshot(shift))

# this is not practicale but I see the appeal
# rightshift = overload(shift,enter)


# tab+capslock = chat
# tab+escape = chat
# leftshift+capslock = chat
# f = enter


# space = leftshift
# space = overload(shift, space)
# space = overloadt(shift, space, 175)


# space = overloadt(shift, space, 168)

# this is interesting. thing to try because I don't really use the shift thing a lot I think
space = overloadt(extend, space, 250)
# Enable always above space remove this, this is just for tldraw for now

# ThisIs a keyd-application thingy angle
# osu-lazer
# space = space

# this is the good one
# rightalt = rightshift
rightalt+space = layer(rightalt_numbers)

# but I'll try this for now
# rightalt = overload(rightalt_numbers, space)
rightalt = overloadt(rightalt_numbers, space, 168)

leftalt+rightalt = layer(rightalt_numbers)
# rightshift = rightshift

# doesn't work well with mouse clicks. I think. maybe I need to add like mouse2 mouse1 idk
# why? because alt+mouse drag hit's backspace for some reason when I release 
# the overloadt with 85 helps but not the best
# leftalt = overloadt(alt, backspace, 085)
# this is alright for now. it makes my thumbs reach control

rightmeta = rightcontrol

# this is alright, I don't use it but, just incase I need rightalt's keycode and also
# for another way to hit alt with right hand. because of above remaps
rightcontrol = rightalt

# this is alright for now, because I changed rightmeta. maybe oneshot() this would
# be better. but i'm not sure

# compose = escape
compose = rightmeta


# leftalt+rightalt = layer(rightalt)
#2 --- Ideas ---- 
#just some ideas for [main] section. Maybe in the future to help improve the ergonomic project


# --- potential layer() mappings ---- 

# why do I need to do this ?
# umm this where like my rightshift inside the xdotool will be interesting to use
# but I know the problem with --clearmodifiers let's just work slowly and see what's
# gonna happen in the future 
# rightalt = layer(rightshift)



# this is another option instead of rightshift to have meta really close to your
# thumb for ease of use but I still value shift more I think.. for now
# rightalt = rightmeta

# leftmeta = rightmeta
# leftmeta = rightmeta




# This is not perfect the layer(rightshift) will kill the keycose I won't be able to
# see it sadly no [alt] or no [rightalt] is provided and so. if I want to make it 
# like [alt] in which in that section there is apostrophe = " I would have to make a
# whole layer sadly and I tried other things... but who knows maybe in the future I 
# will know a fix ? i'm not sure
# rightalt = layer(rightshift)

# this kinda solves it but I don't want rightalt to be leftalt
# rightalt = layer(alt)


# ----- This is how you hit 2 keys at the same time for extra options ----
# just learned this today W32 Sat, 16 at 14:51 it actually works


# wow this is also valid but it has to be hit really fast
# leftalt+p = "



# --- this is how to make a leader ---- 
# just learned this today W32 Sat, 16 at 14:52
# it's very useful for nvim similar things. also could extend it's functionality with
# sxhdk 


# rightalt = oneshot(shift)

# leftshift = oneshot(shift)
# rightshift = oneshot(shift)

# compose = oneshot(meta)

## btw just a side note this --> `rightalt = overload(oneshot(shift), noop)` is stupid and doesn't work

## a side note don't do `leftalt = layer(alt)` it's the default anywher. it's in here but you can't see it. it's default


# just exploring 
# rightalt = oneshot(symbols)
# control = oneshot(control)
# rightmeta = oneshot(control)





# --- other unsuded keys to potentially be used in the future for something ? --- 

# homepage = overload(extend_homepage, escape)

# calc = overload(extend_calc, escape)

# mail = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/alacrity_F2_tmuxSeachMove_withTmuxSesionizer.sh)

# documents = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty)


# these work and just learning and testing for fun, you can also use keyd monitor and hit them
# to find what they are called and map them and what not
# nextsong = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex)
#
# previoussong = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex)
#
# playpause = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex)
#

#2 END--- Ideas END---- 

# END------ Keys END-------


# --------------- Capslock ----------------

[extend]

# with swap we are sacrifcing these buttons but maybe we can do like fake_all with like 
# almost full button access
# dot = swap(fake_control
g = swap(window_management)
w = swap(select_mode)
leftmeta = oneshot(win_shift_shortcut)
# rightalt = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool key Alt_R+Tab)
# rightalt = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh skippy-xd --switch --next)
# rightalt = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh skippy-xd --switch --pivot Alt_L --next --config ~/.config/skippy-xd/skippy-xd.rc)
s = C-a
leftalt = M-grave


# rightcontrol = g
# rightmeta = g
# menu = leftcontrol
# w = overload(control, fake_control)

# q = leftshift

# making this my exit key from any like layer within extend.
# I could also make it escape too it's an alright thing too. 
# or I could maybe make it more useful but nah
q = noop

# leftbrace = swap(fake_shift)

#let's screw around here a bit W32 Tue, 12 at 15:09

# space = leftalt
# space = overload(alt, space)
space = overloadt(alt, space, 168)

# leftalt = leftcontrol
# leftalt = overload(control, escape)

# probably use thise for a oneshot or something like layer 
compose = calc

# rightalt = leftshift

# shit is an interesting key, to try different things on it 
# rightalt = overload(select_mode, capslock)
rightalt = overloadt(win_shift_shortcut, capslock, 168)

# probably make this a oneshot or layer maybe i'm not sure 
# rightmeta = rightmeta
rightmeta = overloadt(meta, enter, 168)
# rightshift = enter
rightshift = overloadt(shift, enter, 168)


# --- NEW POWER-KEY 'Q' ---
# This is a huge upgrade.
# Hold capslock + HOLD 'q' -> acts as Alt key.
# Hold capslock + TAP 'q' -> sends Escape.
# d = overload(alt, escape)

1 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_smart_window_switcher_works_with_Mod4_grave.sh)

2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_win_w_current_desktop_windows.sh)

3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh dolphin)

4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh rofi -show run)

6 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_alt_per_tab_scuffed.bak)

# make window always on top, using the window manager
f1 = M-f

f2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/sticky_window_toggle)

f3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

minus = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

f4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)

equal = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)

# --- YOUR NAVIGATION (PRESERVED & ENHANCED) ---
# Your core vim-style arrow keys are preserved.
h = left
j = down
k = up
l = right

# I've adopted the more standard 'u' and 'o' for line navigation from the Extend example.
# This frees up your number keys.
u = C-z
v = pagedown
r = C-y
c = M-c
5 = A-f2
y = C-c
p = C-v
0 = home
e = end
a = home

# --- YOUR WORD-WISE NAVIGATION (PRESERVED) ---
# These are great, and they don't conflict. They now work with the new home row mods!
# e.g., hold capslock+s+b to do Shift+Ctrl+Left (select word).
f = C-right
b = C-left

# --- YOUR MACRO (MOVED & IMPROVED) ---
# Since 'd' is now the Meta key, I've moved your "select and delete" macro to 'g'.
# It's right next to your home row and easy to press.


# t = command(machinectl shell dex@ /usr/bin//usr/bin/alacritty --working-directory /home/dex)
t = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex)



o = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_next_line.sh)

# --- POWERFUL NEW KEYS FROM THE EXTEND LAYER ---
# These are huge quality-of-life improvements.
slash = delete
semicolon = space
apostrophe = enter
comma = tab
d = delete
n = space
m = enter
i = A-tab
# i = homepage
dot = tab
# n = swap(nearby_symbols)

x = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_select_line_delete.sh)



# To let you toggle the *real* Caps Lock function, we'll map it to 'c'.
# Hold capslock and tap 'c' to turn on actual CAPS LOCK.
rightbrace = escape
leftbrace = backspace

# this is for sxhkd, to reload it do pkill -USR1 -x sxhkd and run it again I think. 
# you can find the config in # ~/.config/sxhkd/sxhkdrc
# this sxhkd is like you know c+x c+f you know it's a like you hit
# and it waits and listens for the next key then depending on the
# next key it will do something. I wonder if I can trigger it with
# other tools that are not keyd like xbindkeys... probably.
# t = M-A-S-c 

# w = M-A-S-c 

# space = swap(vim_mode)

tab = file
# tab = swap(space2

grave = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/hint-focus.py)
# grave = layer(win_shift_shortcut)



# !!!!!!!!! I HAVE space = swap(vim_mode) BUT WHATA ABOUT layer(hypr) we can test like t = layer(hypr) !!!!!!!!
# --- SPECIAL LAYER KEY ---
# This is the new way to access your "hyper" shortcuts.
# Hold CapsLock and press 'e' to temporarily switch to the [hyper] layer.
# t = layer(hyper)

# !!!!!!!!! I HAVE space = swap(vim_mode) BUT WHATA ABOUT layer(hypr) we can test like t = layer(hypr) !!!!!!!!

# --- OTHER BINDINGS PRESERVED ---
# z = C-z
# x = delete      # This is fine, but redundant since ';' is now also delete. Your choice.
# v = C-v
# y = C-c       





[extend+control]

k = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_select_line_delete_end_of_line.sh)

u = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_select_line_delete_home_of_line.sh)




[extend+shift]
# This could be really useful because I have like rightshfit
# I could also make it like enter it via a layer

q = layer(extend)

# o = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_next_line_up.sh)

# 2 = @
# doesn't work 3 = # even if you do  3 = # it's a physical keyboard issue, maybe with no holding q or hold capslock+shfit
# 4 = $
# e = end
# g = pagedown
# x = backspace
# d = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_select_line_delete.sh)



[alt]

capslock = swapm(A_Layer1, mail)
# leftshit = leftshift
# leftalt = leftalt
# rightcontrol = toggle(alt)
apostrophe = enter
leftbrace = C-backspace
rightbrace = escape
space = space
# backslash = |
# slash = !
# comma = < 
semicolon = macro(A-tab)

rightalt = layer(rightalt_numbers)



[extend+alt]


# Your core vim-style arrow keys are preserved.
h = A-left
j = A-down
k = A-up
l = A-right

# I've adopted the more standard 'u' and 'o' for line navigation from the Extend example.
# This frees up your number keys.
u = M-A-S-c
v = pageup
r = C-y
y = C-c
# p = C-v
0 = home
e = end
# i = tab
a = C-a
b = C-b
p = macro(~/)
o = \
n = /
rightbrace = A-pageup
backslash = A-pagedown
leftbrace = C-backspace
# apostrophe = C-w

# the p = macro(~/) is the same thing right... it sends text right and faster and better than doing it in a script this way 
# p = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/sending_theHomeDir_symbole.sh)



# windows manipulation

# close window
# c = M-c

# pin window to all distops
s = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/sticky_window_toggle)

# o = (



# temrinal

# open terminal with tmux-sesionizer C-f for searching through tmux sessions
t = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/alacrity_F2_tmuxSeachMove_withTmuxSesionizer.sh)



# --- YOUR WORD-WISE NAVIGATION (PRESERVED) ---
# These are great, and they don't conflict. They now work with the new home row mods!
# e.g., hold capslock+s+b to do Shift+Ctrl+Left (select word).
# f = C-right
# b = C-left


d = C-delete
slash = C-delete
backspace = C-backspace
semicolon = C-backspace
# comma = escape
# n = space
# m = enter
# dot = tab



# END--------------- Capslock END----------------


# END-------- [space3] END----





# -------- Side note aobut :c] -----
# if you make it [vim_mode:C] it's kinda wanky with scripts but [vim_mod:C] probably has other advantages ? i'm not sure... maybe the ability to repeat keys or whatever
# o = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool key Home)
# I still don't know what to put here for this 3rd layer
# idk aobut this one


# END-------- Side note aobut :c] END-----


# ----------- ESCAPE ----------

[hyper]

w = M-A-S-c 



# END----------- ESCAPE END----------



# -------- Fake Control due to keyboard limitations ----- 




[select_mode]



q = swap(extend)
# dot = swap(extend)
# w = swap(extend)

# v = pagedown



# --- Selection Movement ---
# Your standard navigation keys now automatically apply Shift.
h = S-left
j = S-down
k = S-up
l = S-right

# Word-wise selection
f = C-S-right
b = C-S-left

# Line-wise selection
# 'e' for End of line, 'a' for Ahead (start) of line
e = S-end
a = S-home

# Full line selection macro
x = macro(Home S-End)

# --- Actions on Selection ---
# Use single, mnemonic keys to act on what you've just selected.
y = C-c
d = C-x
p = C-v
c = C-c










[window_management]

q = swap(extend)
# katakanahiragana = xdotool click 6 
# xdotool click 6 = scroll left
s = katakanahiragana

# Katakana = xdotool click 5
# xdotool click 5 = scroll down
d = katakana

# Hiragana = xdotool click 7
# xdotool click 7 = scroll right
f = hiragana

# katakanahiragana = xdotool click 6 
# xdotool click 6 = scroll left
s = katakanahiragana

# XF86TouchpadToggle = xdotool click 4 
# xdotool click 4 = scroll up
e = zenkakuhankaku




# --- Mouse Movement with xdotool ---
# move_relative <x> <y>

# xdotool mousemove_relative -- -20 0
h = yen

# xdotool mousemove_relative -- 0 20
j = muhenkan

# xdotool mousemove_relative -- 0 -20
k = kpjpcomma

# xdotool mousemove_relative -- 20 0
l = ro



# screenshot 
y = sysrq


# buttons

b = leftmouse
n = rightmouse
m = middlemouse

minus =  mouseback
equal =  mouseforward

0 =  mouse2
9 =  mouse1




# -------- just ideas ------------- 
# [fake_shift]

# -------- Just ideas.... this is good for  right alt I think or something 
# we can achieve this better I like the idea but we can do better I think with like
# enough practice and what not 
# [nearby_symbols]
#
# a = ~
# q = ! 
# w = @ 
# e = # 
# r = $ 
# t = & 
# y = ^ 
# u = & 
# i = *
# o = (
# p = )
# leftbrace = _
# rightbrace = +
#
# s = [
# d = ]
# f = {
# g = }
# n = "
# b = |
# z = ?
# c = >
# v = <
# m = :
# x = -
# space = =
#
# q = swap(extend)



# ------- test --------



[control]

leftshift = leftshift

# this fixes the ctrl+a then backspace not working 
backspace = backspace

# control = toggle(control)

# rightmeta = toggle(control)


[A_Layer1]

capslock = enter
leftshift = escape


rightshift = macro(S-A-tab)
rightalt = macro(A-tab)


[shift] 

# leftcontrol = leftcontrol
# leftshift = noop
leftshift = toggle(shift)
# rightshif = swapm(alt12_mode, tab)
# tab = chat
# tab = mail
# tab = macro(S-A-tab)
# capslock = macro(A-tab)


# maybe make this like a different layer. like make holding space not shift. and actually
# like make it a separate layer so this way I don't hit by mistake shift+caplosk.
# also this enables capslock+shift I guess
# capslock = swapm(A_Layer1, mail)



rightshift = macro(S-A-tab)
rightalt = macro(A-tab)
# tab = swapm(alt12_mode, tab)
# capslock = swapm(alt12_mode, tab)
# capslock = swapm(alt12_mode, tab)
# capslock = layerm(alt12_mode, macro(A-tab))
# rightalt = layer(alt12_mode)
# capslock = layerm(tt_rightalt_space, mail)
# leftcontrol = layerm(tt_rightalt_space, mail)
# i = tab
# F1 = space
# leftshift = space
# rightcontrol = toggle(shift)
# rightshift = enter
# rightalt = backspace
# leftalt = enter
# space = space
# rightmeta = escape
[meta]

i = M-i
capslock = homepage

#compose = toggle(meta)
# {}())[(())))((()()()()()() 


[alt12_mode:A]

# leftshift = A-tab
# capslock = tab
# i = tab
# capslock = layerm(shift, tab)
# capslock = layerm(shift, tab)


# leftcontrol = tab

[rightalt_numbers]

# space = overload(rightalt_space, space)
space = layer(rightalt_space)
leftalt = overload(rightalt_leftalt, .)
leftshift = overload(rightalt_leftshift, chat)

leftcontrol = M-grave

tab = chat
capslock = swapm(alt12_mode, tab)

u = 7
i = 8
o = 9
j = 4
k = 5
l = 6
m = 1
comma = 2
dot = 3
n = 0 


p = -

a = {
s = }
d = (
f = )
g = [
h = ]

q = ?
w = @
e = !
r = $
t = %
y = ^

b = &
x = \
z = /
c = #
v = >

# I think it's faster for me to type fg then hit enter
# f = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/fg_then_enter.sh)


# --- The TWO-STAGE Modifier ---
# Your brilliant idea: while holding RightAlt, ALSO hold space
# to get a momentary numpad.


semicolon = space 
leftbrace = backspace
rightbrace = escape
apostrophe = enter
rightshift = enter

compose = ?

backslash = % 
leftmeta = _ 
slash = /

f12 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh keyd reload)


# I can't reach it well
# rightmeta = enter

#can't reach this well
#compose = backspace


1 = M-1
2 = M-2
3 = M-3
4 = M-4
5 = M-5
6 = M-6
7 = M-7
8 = M-8
9 = M-9
0 = M-0
- = M--
= = M-=


[tt_rightalt_space]


leftcontrol = tab

# capslock = tab

[rightalt_space]


# I think it doesn't work cuz of keyboard 
# leftshift = mail


leftcontrol = layerm(tt_rightalt_space, mail)



# Numpad layout on the right hand
u = &
i = *
o = (
j = $
k = %
l = ^
m = !
comma = @ 
dot = .
n = )

d = .
f = :
s = ;



semicolon = -
leftbrace = +
rightbrace = *
apostrophe = =
backslash = %
leftshift = ?
y = #
c = #
b = _
slash = /
x = \
z = /
rightmeta = enter
compose = enter


# This is the secondary layer, active only while holding RightAlt AND Space.
[rightalt_leftalt]

# --- Numpad Layout (Left Hand) ---
# Your original idea, which is a standard and effective layout.
q = 1
w = 2
e = 3
r = 4
t = 5
y = 6
u = 7
i = 8
o = 9
p = 0

# --- Math Operators --- a = -
s = chat
d = *
f = /
g = =

# --- Nvim Macros (preserved) ---
z = C-z
x = macro(ZZ)
c = macro(ZQ)


h = left
j = down
k = up
l = right

n = space
m = enter





[rightalt_leftshift]

g = swap(window_management)
w = swap(select_mode)

s = C-a

leftalt = M-grave
# leftalt = overload(control, escape)

q = noop

# space = leftalt
space = overload(alt, space)



# probably use thise for a oneshot or something like layer 
# compose = capslock

# rightalt = leftshift
rightalt = overload(shift, capslock)

# probably make this a oneshot or layer maybe i'm not sure 
rightmeta = rightmeta
rightmeta = overload(meta, enter)



# --- NEW POWER-KEY 'Q' ---
# This is a huge upgrade.
# Hold capslock + HOLD 'q' -> acts as Alt key.
# Hold capslock + TAP 'q' -> sends Escape.
# d = overload(alt, escape)

1 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_smart_window_switcher_works_with_Mod4_grave.sh)

2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_win_w_current_desktop_windows.sh)

3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh dolphin)

4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh rofi -show run)

6 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_alt_per_tab_scuffed.bak)

# make window always on top, using the window manager
f1 = M-f

f2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/sticky_window_toggle)

f3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

minus = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

f4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)

equal = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)

# --- YOUR NAVIGATION (PRESERVED & ENHANCED) ---
# Your core vim-style arrow keys are preserved.
h = left
j = down
k = up
l = right

# I've adopted the more standard 'u' and 'o' for line navigation from the Extend example.
# This frees up your number keys.
u = C-z
v = pagedown
r = C-y
c = M-c
5 = A-f2
y = C-c
p = C-v
0 = home
e = end
a = home

# --- YOUR WORD-WISE NAVIGATION (PRESERVED) ---
# These are great, and they don't conflict. They now work with the new home row mods!
# e.g., hold capslock+s+b to do Shift+Ctrl+Left (select word).
f = C-right
b = C-left

# --- YOUR MACRO (MOVED & IMPROVED) ---
# Since 'd' is now the Meta key, I've moved your "select and delete" macro to 'g'.
# It's right next to your home row and easy to press.


# t = command(machinectl shell dex@ /usr/bin//usr/bin/alacritty --working-directory /home/dex)
t = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex)



o = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_next_line.sh)

# --- POWERFUL NEW KEYS FROM THE EXTEND LAYER ---
# These are huge quality-of-life improvements.
slash = delete
semicolon = space
apostrophe = enter
comma = tab
d = delete
n = space
m = enter
i = tab
dot = space
# n = swap(nearby_symbols)

x = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/keyd/keyd_select_line_delete.sh)



# To let you toggle the *real* Caps Lock function, we'll map it to 'c'.
# Hold capslock and tap 'c' to turn on actual CAPS LOCK.
rightbrace = escape
leftbrace = backspace

# this is for sxhkd, to reload it do pkill -USR1 -x sxhkd and run it again I think. 
# you can find the config in # ~/.config/sxhkd/sxhkdrc
# this sxhkd is like you know c+x c+f you know it's a like you hit
# and it waits and listens for the next key then depending on the
# next key it will do something. I wonder if I can trigger it with
# other tools that are not keyd like xbindkeys... probably.
# t = M-A-S-c 

# w = M-A-S-c 

# space = swap(vim_mode)

tab = chat
# tab = swap(space2

grave = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/hint-focus.py)
# grave = layer(win_shift_shortcut)
leftmeta = oneshot(win_shift_shortcut)


# !!!!!!!!! I HAVE space = swap(vim_mode) BUT WHATA ABOUT layer(hypr) we can test like t = layer(hypr) !!!!!!!!
# --- SPECIAL LAYER KEY ---
# This is the new way to access your "hyper" shortcuts.
# Hold CapsLock and press 'e' to temporarily switch to the [hyper] layer.
# t = layer(hyper)

# !!!!!!!!! I HAVE space = swap(vim_mode) BUT WHATA ABOUT layer(hypr) we can test like t = layer(hypr) !!!!!!!!

# --- OTHER BINDINGS PRESERVED ---
# z = C-z
# x = delete      # This is fine, but redundant since ';' is now also delete. Your choice.
# v = C-v
# y = C-c       











[win_shift_shortcut]

space = overload(win_shift_shortcut_space, space)

b = M-S-b
m = M-S-m
t = M-S-t
d = M-S-d
r = M-S-r
q = M-S-q
v = M-S-v
c = M-S-c
o = M-S-o
g = M-S-g
n = M-S-n
s = M-S-s
p = M-S-p
w = M-S-w
a = M-S-a
l = M-S-l
k = M-S-k
f = M-S-f


1 = M-1
2 = M-2
3 = M-3
4 = M-4
5 = M-5
6 = M-6
7 = M-7
8 = M-8
9 = M-9
0 = M-0


[win_shift_shortcut_space]


1 = M-C-1
2 = M-C-2
3 = M-C-3
4 = M-C-4
5 = M-C-5
6 = M-C-6
7 = M-C-7
8 = M-C-8
9 = M-C-9
0 = M-C-0


q = M-1
w = M-2
e = M-3
r = M-4
t = M-5
y = M-6
u = M-7
i = M-8
o = M-9
p = M-0


[escape_extend]

s = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/scripts &)

m = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Music &)

h = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Home &)

b = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Backup &)

q = noop

space = leftalt

1 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_smart_window_switcher_works_with_Mod4_grave.sh)

2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_win_w_current_desktop_windows.sh)

3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh dolphin)

4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh rofi -show run)

6 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/rofi_alt_per_tab_scuffed.bak)

f1 = M-f

f2 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/sticky_window_toggle)

f3 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

minus = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 900 600)

f4 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)




equal = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh xdotool mousemove 2600 400)

i = tab

p = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/projects &)

g = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/git &)

f = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/fleet &)

v = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Videos &)

tab = chat

t = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh /home/dex/scripts/ddesk/nothing/alacrity_F2_tmuxSeachMove_withTmuxSesionizer.sh)

grave = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/)

y = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/syncthing &)

o = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/syncthing/phone_sync &)

a = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Audio &)

n = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Android &)

i = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Pictures &)

r = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/share &)



d = oneshot(escape_d)





[escape_extend+alt]

p = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/power &)

t = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/tests)

d = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Desktop &)

s = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh dolphin /home/dex/Pictures/Screenshots &)




f1 = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh flameshotdelayed.sh)



[escape_d]

w = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Downloads &)

c = command(sudo -u dex -H /home/dex/scripts/dex_session_launcher.sh alacritty --working-directory /home/dex/Documents &)
