# vim: filetype=tmux

# -----------------------------------------------------------------------------
# A VIM-INSPIRED TMUX CONFIGURATION (SAFE VERSION FOR OLDER TMUX)
# -----------------------------------------------------------------------------

# --- [0] CORE SETTINGS ---

# --- CORE SETTINGS or POPUP SECTION ---

# Unbind the default Escape key for popups to allow it to pass through to the shell
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
set-option -g history-limit 10000
# If you pause for 500ms after the prefix, the prefix deactivates
set-option -g repeat-time 500
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -g mouse on
set-option -s escape-time 0
# set-option -g default-terminal "tmux-256color"
# set-window-option -g xterm-keys on
# set-option -ag terminal-overrides ",xterm-256color:RGB"
#---- This enables True Color and other features for all xterm-compatible terminals
# set-option -sa terminal-overrides ",xterm*:Tc"
# Explicitly tell tmux to pass through Kitty's advanced terminal features
# set -g terminal-features ",xterm-kitty:RGB:clipboard:ccolour:cstyle:focus:title"


set-option -g default-terminal "tmux-256color"
set-window-option -g xterm-keys on

set-option -ga terminal-features ",alacritty:RGB"

# --- [2] NAVIGATION (THE VIM WAY) ---
bind -r a last-window

# noo need for this because of control+hjkl which works in nvim too lol... so what to do with j and k no clue 
# bind -r j select-pane -D
# bind -r k select-pane -U

bind -r h previous-window
bind -r l next-window
# bind -r H previous-window
# bind -r L next-window
# bind -r l select-pane -R
# bind -r h select-pane -L

# Enable Vim-style pane navigation without prefix
# bind-key -n C-h select-pane -L
# bind-key -n C-j select-pane -D
# bind-key -n C-k select-pane -U
# bind-key -n C-l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R


# ---- kitty things, new to me things... don't know if they even work. last tested didn't work lol
# set-option -g "tmux-features" "xterm-kitty"
# set-option -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
# set-option -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%d;m'  # underscore colors

# --- [1] KEY BINDINGS ---
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# this is htop because btop needs good resize and yeah
bind-key -r M-h run-shell "tmux neww tmux-sessionizer -s 0"

# this is lazygit
bind-key -r M-l run-shell "tmux neww tmux-sessionizer -s 1"

# This is nvim opened in ~/ idk why man
bind-key -r M-n run-shell "tmux neww tmux-sessionizer -s 2"

# this is matrix
bind-key -r M-s run-shell "tmux neww tmux-sessionizer -s 3"

# This is btop
bind-key -r M-b run-shell "tmux neww tmux-sessionizer -s 4"

# This is for taking fleeting notes real quick because why not
# Fleeting notes for obsidian
bind-key M-o split-window -h "scripts/ddesk/obsidian/new-note.sh"
# This is the robust, two-step solution:
# 1. Create the popup (which starts a default shell).
# 2. Use send-keys to type the command into the newly created popup.
# The final version: Create popup, WAIT, then send keys.


# NOTE: All 'mark-pane' functionality is disabled until the version issue is fixed.

# the C-a then r says this command is unknown so... idk... seems like C-a m works by default
# bind m mark-pane
bind ` switch-client -t'{marked}'
## do not do C-a that will screw up tmux's C-a sadly with this you have to hit C-a twice
bind-key -r M-a switch-client -l
bind M-j choose-window 'join-pane -h -s "%%"'
bind J choose-window 'join-pane -s "%%"'


# --- [3] PANE MANAGEMENT ---
bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}"
bind \\ split-window -hc "#{pane_current_path}"
bind _ split-window -vc "#{pane_current_path}"
bind -r x kill-pane
bind -r b break-pane
# Fuzzy find sessions to switch to

bind C-c send-keys 'C-l'

# ---- Popups ------------

bind g display-popup -w 80% -h 80% "lazygit"
# A popup for a file manager like 'ranger' or 'lf' (requires one of them)

# This needs to be yazi with the y but it's not working 
# bind e display-popup -w 80% -h 80% -E "y"
bind e display-popup -w 80% -h 80% "yazi"

# Shows only the tmux sessions I have
bind C-f display-popup -h 80% -E "tmux list-sessions | sed 's/:.*//' | fzf --reverse | xargs tmux switch-client -t"

bind '!' display-popup -w 80% -h 80% "htop"
bind C-b display-popup -w 95% -h 95% "btop"

# Fuzzy find windows in the current session
bind s display-popup -E "tmux list-windows -F '#I:#W' | fzf --reverse | sed 's/:.*//' | xargs tmux select-window -t"

# A quick calculator using 'qalc' (requires qalculate)
bind C display-popup -w 50% -h 50% -E "qalc"


# --- SCRATCHPAD BINDINGS (V2 - WORKING) ---

# --- SCRATCHPAD BINDINGS (V3 - FINAL & ROBUST) ---

# Toggle the scratchpad popup window
bind "'" run-shell "~/.local/scripts/tmux-scratchpad.sh"

# A universal key to close any focused popup window
bind-key q detach-client -P

# "Promote" the scratchpad to a NEW WINDOW in the current session.
# This binding should be used AFTER closing the popup.
bind M-Enter new-window -d -t _scratchpad: \; move-window -s _scratchpad:

# "Join" the scratchpad as a NEW PANE in the current window (Vertical Split)
# This binding should be used AFTER closing the popup.
bind M-| new-window -d -t _scratchpad: \; join-pane -h -s _scratchpad:

# "Join" the scratchpad as a NEW PANE in the current window (Horizontal Split)
# This binding should be used AFTER closing the popup.
bind M-_ new-window -d -t _scratchpad: \; join-pane -v -s _scratchpad:

# --- NAVIGATION ---

bind-key w display-panes

bind-key W choose-window

# Shows the tmux sessions and you know. possible tmux seesions to open from ~/
# this is what I'm used to see
bind t display-popup -h 80% -E "~/.local/scripts/tmux-sessionizer"

# temporary terminal popup to run A quick run one command
# to be honest this is whatever could be salvagable
bind-key T run-shell "~/.local/scripts/tmux-temp-terminal.sh"

# Binds 'T' to prompt for a command, then runs that command in a popup.
bind-key p command-prompt -p "CLI prompt:" "display-popup -w 90% -h 90% '%%'"

# Find a file and open it in a new horizontal split
bind o display-popup -w 80% -h 80% -E "fd . -t f -H --ignore-file ~/scripts/excludes/fd/excludes_for_a_tmux_pop_up | fzf --reverse | xargs -I {} tmux split-window -h 'nvim {}'"

# Toggle pane synchronization it's so sick if you have multiple panes and you want to type in all of them at once
bind M-v set-window-option synchronize-panes

# Open the session chooser menu
bind M-f choose-session


# No need fore this because $PREFIX + w already does it and it's the default I think
# bind T choose-tree


# it will kill the whole window with all it's panes unlike bind x where it only kills pane
bind X kill-window
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5
bind z resize-pane -Z
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# --- [4] WINDOW MANAGEMENT ---
bind c new-window -c "#{pane_current_path}"
bind , command-prompt "rename-window '%%'"

# --- [5] COPY MODE (THE VIM WAY) ---
set-window-option -g mode-keys vi
bind [ copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi q send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"

bind P paste-buffer

# --- [6] AESTHETICS ---
set-option -g status-position top
set-option -g status-style bg=default,fg=white
set-option -g pane-border-style fg=gray
set-option -g pane-active-border-style fg=cyan
set-option -g message-style bg=default,fg=cyan,bold
set-option -g status-left-length 30
# set-option -g status-left " #[bold,fg=cyan]‚ùê #S #[default]"
set-option -g status-left "#[bold,fg=green]#S#[default]"
set-option -g status-justify centre

      
# --- This is the NEW, more reliable version with the [M] indicator ---

# For inactive windows. Note the new #{?} conditional.
set-option -g window-status-format " #I/#{session_windows}:#W#{?window_marked_flag,[M],}(#{window_panes}p) "

# For the currently active window
set-option -g window-status-current-format " #[bold,bg=cyan,fg=black] #I/#{session_windows}:#W#{?window_marked_flag,[M],}(#{window_panes}p) #[default] "

    
# set-option -g window-status-separator ""
# set-option -g status-right "#[bold,fg=cyan]%a %d-%b-%Y #[fg=white]%H:%M "
set-option -g status-right "#[bold,fg=cyan]%d #[fg=white]%H:%M "
set-window-option -g window-status-last-style "fg=yellow" # Highlights window with marked pane in status bar

# NOTE: Hooks are disabled until the version issue is fixed.
# set-hook -g pane-marked 'run-shell "~/.local/scripts/tmux_mark_toggle.sh"'
# set-hook -g pane-unmarked 'run-shell "~/.local/scripts/tmux_mark_toggle.sh"'

# --- [7] PLUGINS ---
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TPM.
run '~/.tmux/plugins/tpm/tpm'
